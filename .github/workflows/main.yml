name: 'Baidu Tieba Auto Sign'

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 21 * * *'
  # 推荐添加手动触发，方便您测试和立即运行
  workflow_dispatch:
 
jobs:
  sign:
    runs-on: ubuntu-latest
    steps:
      - name: '检测代码'
        uses: actions/checkout@v3

      - name: '初始化Python'
        # 我们给这个步骤一个ID，这样后面就可以引用它的“产出”
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # --- 这是最健壮的 Python 缓存方式 ---
      - name: '缓存Python环境'
        uses: actions/cache@v4
        with:
          # 路径：不再写死，而是使用上一步“初始化Python”的输出变量
          # 这会动态地获取到 Python 被实际安装或找到的路径
          path: ${{ steps.setup-python.outputs.python-path }}
          # 键：同样使用上一步的输出，确保键和实际版本完全对应
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/requirements.txt') }}
          # 恢复键，只匹配操作系统和Python，作为备用
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-

      # --- Pip 缓存保持不变，它一直都是正确的 ---
      - name: '缓存Pip依赖'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: '安装依赖包'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: '开始签到'
        env:
          BDUSS: ${{ secrets.BDUSS }}
        run: python main.py
